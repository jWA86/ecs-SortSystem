{"version":3,"sources":["../src/compiler/compiler.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AACjC,+BAAiC;AAIjC,iDAAgD;AAGhD,6CAAuD;AAUvD;IAYI,kBAAoB,MAAqB,EAAU,GAAW,EAAU,OAAgB;QAAxF,iBAOC;QAPmB,WAAM,GAAN,MAAM,CAAe;QAAU,QAAG,GAAH,GAAG,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAS;QAThF,kBAAa,GAAkB,EAAE,CAAC;QAElC,cAAS,GAAa,EAAE,CAAC;QAoFzB,kBAAa,GAAG,UACpB,QAAgB,EAChB,eAAgC,EAChC,OAAmC;YAEnC,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACjD,IAAI,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAC5D,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;YACL,CAAC;YAED,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QACtE,CAAC,CAAA;QAzFG,MAAM,CAAC,SAAS,CAAC;YACb,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAC1D,KAAI,CAAC,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC;gBACnC,KAAI,CAAC,cAAc,EAAE,CAAC;YAC1B,CAAC,EAAE,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,0BAAO,GAAd,UAAe,IAAU,EAAE,QAAyB;QAEhD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAChB,IAAI,MAAA;YACJ,QAAQ,UAAA;SACX,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,iCAAc,GAAtB;QAEI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,uCAAuC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC;QAEnE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,mBAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC;QAED,IAAI,SAAS,GAAG,IAAI,qBAAS,EAAE,CAAC;QAChC,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAE1C,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAExC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACzF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;QAElC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,6BAA6B,EAAE,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QAC7F,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC7B,CAAC;IAEO,iCAAc,GAAtB;QAAA,iBAQC;QAPG,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,CAAC;QAC9E,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;QACzD,IAAI,CAAC,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACrD,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,UAAC,QAAQ,EAAE,IAAI;YACzC,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;QACxC,CAAC,CAAC;IACN,CAAC;IAEO,oCAAiB,GAAzB;QAAA,iBAwBC;QAtBG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,MAAM;YAE1B,IAAI,UAAU,GAAG,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAEtE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,KAAK;oBACzD,mFAAmF,CAAC,CAAC;YACzG,CAAC;YAED,IAAI,kBAAkB,GAAU,UAAW,CAAC,kBAAkB,CAAC;YAE/D,MAAM,CAAC,QAAQ,CAAC;gBACZ,kBAAkB,oBAAA;gBAClB,eAAe,EAAE,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC;gBACpE,iBAAiB,EAAE,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC;gBACrE,UAAU,EAAE,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;gBAChD,UAAU,YAAA;gBACV,aAAa,EAAE,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;aAC/D,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9B,CAAC;IAiBO,2BAAQ,GAAhB,UAAiB,QAAgB;QAC7B,GAAG,CAAC,CAAe,UAAc,EAAd,KAAA,IAAI,CAAC,SAAS,EAAd,cAAc,EAAd,IAAc;YAA5B,IAAI,MAAM,SAAA;YACX,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;SACJ;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,iCAAc,GAAtB,UAAuB,OAAmB,EAAE,IAAqB;QAC7D,IAAI,WAAW,GAAG,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAEO,oCAAiB,GAAzB,UAA0B,WAA4B,EAAE,IAA+B;QAAvF,iBA+BC;QA7BG,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAExC,WAAW,CAAC,OAAO,CAAC,UAAC,UAAU;gBAE3B,EAAE,CAAC,CAAC,EAAE,CAAC,iBAAiB,IAAI,IAAI,CAAC,CAAC,CAAC;oBAC/B,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC7D,CAAC;gBACD,IAAI,CAAC,CAAC;oBAEF,IAAI,MAAM,GAAG,EAAE,CAAC;oBAEhB,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;wBAClB,IAAI,GAAG,GAAG,EAAE,CAAC,6BAA6B,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;wBAC9E,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC;4BACnD,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;oBACvE,CAAC;oBAED,IAAI,QAAQ,GAAG,EAAE,CAAC,kBAAkB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;oBACxE,MAAM,IAAI,QAAQ,GAAG,KAAK,GAAG,UAAU,CAAC,IAAI,GAAG,IAAI;wBACzC,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC;oBAEnG,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC3B,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;gBACnD,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,iCAAiC,CAAC,CAAC;YACjE,CAAC;QACL,CAAC;IACL,CAAC;IAEO,kCAAe,GAAvB,UAAwB,IAAY,EAAE,SAAiB;QACnD,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC5E,CAAC;IAEO,2BAAQ,GAAhB,UAAiB,GAAW,EAAE,MAAc;QACxC,IAAI,WAAW,GAAG,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7C,MAAM,CAAC,WAAW,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,KAAK,WAAW,CAAC;IAChF,CAAC;IACL,eAAC;AAAD,CA/JA,AA+JC,IAAA;AA/JY,4BAAQ","file":"../../../../../../../../dist/compiler/compiler.js","sourcesContent":["import * as lodash from \"lodash\";\nimport * as ts from \"typescript\";\n\nimport { Logger } from \"log4js\";\n\nimport { Benchmark } from \"../shared/benchmark\";\nimport { Configuration } from \"../shared/configuration\";\nimport { File } from \"../shared/file\";\nimport { EventType, Project } from \"../shared/project\";\nimport { CompileCallback } from \"./compile-callback\";\n\ntype CompiledFiles = { [key: string]: string; };\n\ntype Queued = {\n    file: File;\n    callback: CompileCallback;\n};\n\nexport class Compiler {\n\n    private cachedProgram: ts.Program;\n    private compiledFiles: CompiledFiles = {};\n    private compilerHost: ts.CompilerHost;\n    private emitQueue: Queued[] = [];\n    private hostGetSourceFile: {(filename: string, languageVersion: ts.ScriptTarget,\n                                 onError?: (message: string) => void): ts.SourceFile};\n    private program: ts.Program;\n\n    private compileDeferred: () => void;\n\n    constructor(private config: Configuration, private log: Logger, private project: Project) {\n        config.whenReady(() => {\n            this.log.debug(\"Setting up deferred project compilation\");\n            this.compileDeferred = lodash.debounce(() => {\n                this.compileProject();\n            }, this.config.compilerDelay);\n        });\n    }\n\n    public compile(file: File, callback: CompileCallback): void {\n\n        this.emitQueue.push({\n            file,\n            callback\n        });\n\n        this.compileDeferred();\n    }\n\n    private compileProject(): void {\n\n        this.log.info(\"Compiling project using Typescript %s\", ts.version);\n\n        if (this.project.handleFileEvent() === EventType.FileSystemChanged) {\n            this.setupRecompile();\n        }\n\n        let benchmark = new Benchmark();\n        let tsconfig = this.project.getTsconfig();\n\n        this.outputDiagnostics(tsconfig.errors);\n\n        this.program = ts.createProgram(tsconfig.fileNames, tsconfig.options, this.compilerHost);\n        this.cachedProgram = this.program;\n\n        this.runDiagnostics(this.program, this.compilerHost);\n        this.program.emit();\n        this.log.info(\"Compiled %s files in %s ms.\", tsconfig.fileNames.length, benchmark.elapsed());\n        this.onProgramCompiled();\n    }\n\n    private setupRecompile(): void {\n        this.cachedProgram = undefined;\n        this.compilerHost = ts.createCompilerHost(this.project.getTsconfig().options);\n        this.hostGetSourceFile = this.compilerHost.getSourceFile;\n        this.compilerHost.getSourceFile = this.getSourceFile;\n        this.compilerHost.writeFile = (filename, text) => {\n            this.compiledFiles[filename] = text;\n        };\n    }\n\n    private onProgramCompiled(): void {\n\n        this.emitQueue.forEach((queued) => {\n\n            let sourceFile = this.program.getSourceFile(queued.file.originalPath);\n\n            if (!sourceFile) {\n                throw new Error(\"No source found for \" + queued.file.originalPath + \"!\\n\" +\n                                \"Is there a mismatch between the Typescript compiler options and the Karma config?\");\n            }\n\n            let ambientModuleNames = (<any> sourceFile).ambientModuleNames;\n\n            queued.callback({\n                ambientModuleNames,\n                isAmbientModule: ambientModuleNames && ambientModuleNames.length > 0,\n                isDeclarationFile: this.fileExtensionIs(sourceFile.fileName, \".d.ts\"),\n                outputText: this.compiledFiles[queued.file.path],\n                sourceFile,\n                sourceMapText: this.compiledFiles[queued.file.path + \".map\"]\n            });\n        });\n\n        this.emitQueue.length = 0;\n    }\n\n    private getSourceFile = (\n        filename: string,\n        languageVersion: ts.ScriptTarget,\n        onError?: (message: string) => void): ts.SourceFile => {\n\n        if (this.cachedProgram && !this.isQueued(filename)) {\n            let sourceFile = this.cachedProgram.getSourceFile(filename);\n            if (sourceFile) {\n                return sourceFile;\n            }\n        }\n\n        return this.hostGetSourceFile(filename, languageVersion, onError);\n    }\n\n    private isQueued(filename: string): boolean {\n        for (let queued of this.emitQueue) {\n            if (queued.file.originalPath === filename) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private runDiagnostics(program: ts.Program, host: ts.CompilerHost): void {\n        let diagnostics = ts.getPreEmitDiagnostics(program);\n        this.outputDiagnostics(diagnostics, host);\n    }\n\n    private outputDiagnostics(diagnostics: ts.Diagnostic[], host?: ts.FormatDiagnosticsHost): void {\n\n        if (diagnostics && diagnostics.length > 0) {\n\n            diagnostics.forEach((diagnostic) => {\n\n                if (ts.formatDiagnostics && host) { // v1.8+\n                    this.log.error(ts.formatDiagnostics([diagnostic], host));\n                }\n                else { // v1.6, v1.7\n\n                    let output = \"\";\n\n                    if (diagnostic.file) {\n                        let loc = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start);\n                        output += diagnostic.file.fileName.replace(process.cwd(), \"\") +\n                                  \"(\" + (loc.line + 1) + \",\" + (loc.character + 1) + \"): \";\n                    }\n\n                    let category = ts.DiagnosticCategory[diagnostic.category].toLowerCase();\n                    output += category + \" TS\" + diagnostic.code + \": \" +\n                              ts.flattenDiagnosticMessageText(diagnostic.messageText, ts.sys.newLine) + ts.sys.newLine;\n\n                    this.log.error(output);\n                }\n            });\n\n            if (this.project.getTsconfig().options.noEmitOnError) {\n                ts.sys.exit(ts.ExitStatus.DiagnosticsPresent_OutputsSkipped);\n            }\n        }\n    }\n\n    private fileExtensionIs(path: string, extension: string) {\n        return path.length > extension.length && this.endsWith(path, extension);\n    }\n\n    private endsWith(str: string, suffix: string) {\n        let expectedPos = str.length - suffix.length;\n        return expectedPos >= 0 && str.indexOf(suffix, expectedPos) === expectedPos;\n    }\n}\n"]}