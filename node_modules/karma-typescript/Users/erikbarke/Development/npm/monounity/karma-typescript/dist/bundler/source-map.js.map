{"version":3,"sources":["../src/bundler/source-map.ts"],"names":[],"mappings":"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","file":"../../../../../../../../dist/bundler/source-map.js","sourcesContent":["import * as combineSourceMap from \"combine-source-map\";\nimport * as convertSourceMap from \"convert-source-map\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { Logger } from \"log4js\";\nimport { Configuration } from \"../shared/configuration\";\nimport { BundleItem } from \"./bundle-item\";\nimport { Queued } from \"./queued\";\n\nexport class SourceMap {\n\n    private combiner: Combiner;\n    private line: number = 0;\n\n    constructor(private config: Configuration, private log: Logger) {}\n\n    public initialize(bundle: string) {\n        this.combiner = combineSourceMap.create();\n        this.line = this.getNumberOfNewlines(bundle);\n    }\n\n    public createInlineSourceMap(queued: Queued): string {\n        let inlined = queued.emitOutput.outputText;\n        if (queued.emitOutput.sourceMapText) {\n\n            let map = convertSourceMap.fromJSON(queued.emitOutput.sourceMapText);\n            if (!map.getProperty(\"sourcesContent\")) {\n                map.addProperty(\"sourcesContent\", [queued.emitOutput.sourceFile.text]);\n            }\n            inlined = combineSourceMap.removeComments(queued.emitOutput.outputText) + map.toComment();\n\n            // used by Karma to log errors with original source code line numbers\n            queued.file.sourceMap = map.toObject();\n        }\n        return inlined;\n    }\n\n    public addFile(bundleItem: BundleItem) {\n\n        if (this.config.bundlerOptions.sourceMap) {\n\n            this.loadFileFromComment(bundleItem);\n\n            let sourceFile = path.relative(this.config.karma.basePath, bundleItem.filename);\n            this.combiner.addFile(\n                { sourceFile: path.join(\"/base\", sourceFile), source: bundleItem.source },\n                { line: this.line }\n            );\n        }\n\n        bundleItem.source = combineSourceMap.removeComments(bundleItem.source);\n    }\n\n    public offsetLineNumber(wrappedSource: string) {\n        if (this.config.bundlerOptions.sourceMap) {\n            this.line += this.getNumberOfNewlines(wrappedSource);\n        }\n    }\n\n    public getComment() {\n        return this.config.bundlerOptions.sourceMap ? this.combiner.comment() : \"\";\n    }\n\n    public loadFileFromComment(bundleItem: BundleItem) {\n\n        let commentMatch = convertSourceMap.mapFileCommentRegex.exec(bundleItem.source);\n\n        if (commentMatch && commentMatch[1]) {\n\n            let map: convertSourceMap.SourceMapConverter;\n            let dirname = path.dirname(bundleItem.filename);\n\n            if (!commentMatch[1].startsWith(\"data:\")) {\n                let mapFilename = path.join(dirname, commentMatch[1]);\n                try {\n                    let mapJson = fs.readFileSync(mapFilename, \"utf-8\");\n                    map = convertSourceMap.fromJSON(mapJson);\n                }\n                catch (error) {\n                    this.log.debug(\"Source map %s doesn't exist\", mapFilename);\n                }\n            }\n            else {\n                map = convertSourceMap.fromComment(commentMatch[0]);\n            }\n\n            if (!map) {\n                this.log.debug(\"Unable to resolve source map for %s\", bundleItem.filename);\n                return;\n            }\n\n            if (!map.getProperty(\"sourcesContent\")) {\n\n                let sourcesContent: string[] = [];\n                map.getProperty(\"sources\").forEach((source: string) => {\n                    let sourceFilename = path.join(dirname, source);\n                    let sourceContent = fs.readFileSync(sourceFilename, \"utf-8\");\n                    sourcesContent.push(sourceContent);\n                });\n                map.addProperty(\"sourcesContent\", sourcesContent);\n            }\n\n            this.cleanupSources(map);\n\n            bundleItem.source = combineSourceMap.removeComments(bundleItem.source) + map.toComment();\n        }\n    }\n\n    private cleanupSources(map: convertSourceMap.SourceMapConverter) {\n        map.sourcemap.sources.forEach((source: string, index: number) => {\n            map.sourcemap.sources[index] = source.replace(\"webpack:///\", \"\");\n        });\n    }\n\n    private getNumberOfNewlines(source: any) {\n        let newlines = source.match(/\\n/g);\n        return newlines ? newlines.length : 0;\n    }\n}\n"]}