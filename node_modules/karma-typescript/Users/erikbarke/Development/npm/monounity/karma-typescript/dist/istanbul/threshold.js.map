{"version":3,"sources":["../src/istanbul/threshold.ts"],"names":[],"mappings":"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","file":"../../../../../../../../dist/istanbul/threshold.js","sourcesContent":["import * as istanbul from \"istanbul\";\nimport { merge } from \"lodash\";\nimport { Logger } from \"log4js\";\nimport * as minimatch from \"minimatch\";\nimport { Configuration } from \"../shared/configuration\";\nimport { FileUtils } from \"../shared/file-utils\";\n\nexport class Threshold {\n\n    constructor(private config: Configuration, private log: Logger) {\n    }\n\n    public check(browser: any, collector: any) {\n\n        let thresholdConfig = this.config.coverageOptions.threshold;\n        let finalCoverage = collector.getFinalCoverage();\n        let globalCoverage = this.excludeFiles(finalCoverage, thresholdConfig.global.excludes);\n        let globalResults = (<any> istanbul.utils).summarizeCoverage(globalCoverage);\n        let passedThreshold = true;\n\n        let checkThresholds = (name: string, thresholds: any, results: any) => {\n\n            [\"branches\", \"functions\", \"lines\", \"statements\"].forEach((key) => {\n\n                let result = results[key];\n                let uncovered = result.total - result.covered;\n                let threshold = thresholds[key];\n\n                if (threshold < 0 && threshold * -1 < uncovered) {\n                    passedThreshold = false;\n                    this.log.error(\"%s: Expected max %s uncovered %s, got %s (%s)\",\n                        browser.name, (-1 * threshold), key, uncovered, name);\n                }\n                else if (result.pct < threshold) {\n                    passedThreshold = false;\n                    this.log.error(\"%s: Expected %s% coverage for %s, got %s% (%s)\",\n                        browser.name, threshold, key, result.pct, name);\n                }\n            });\n        };\n\n        checkThresholds(\"global\", thresholdConfig.global, globalResults);\n\n        Object.keys(finalCoverage).forEach((filename) => {\n\n            let relativeFilename = FileUtils.getRelativePath(filename, this.config.karma.basePath);\n            let excludes = this.config.coverageOptions.threshold.file.excludes;\n\n            if (!this.isExcluded(relativeFilename, excludes)) {\n                let fileResult = (<any> istanbul.utils).summarizeFileCoverage(finalCoverage[filename]);\n                let thresholds = merge(thresholdConfig.file, this.getFileOverrides(relativeFilename));\n                checkThresholds(filename, thresholds, fileResult);\n            }\n        });\n\n        return passedThreshold;\n    }\n\n    private excludeFiles(coverage: any, excludes: string[]) {\n        let result: { [key: string]: any } = {};\n        Object.keys(coverage).forEach((filename) => {\n            if (!this.isExcluded(FileUtils.getRelativePath(filename, this.config.karma.basePath), excludes)) {\n                result[filename] = coverage[filename];\n            }\n        });\n        return result;\n    }\n\n    private isExcluded(relativeFilename: string, excludes: string[]) {\n        return excludes.some((pattern) => {\n            return minimatch(relativeFilename, pattern, { dot: true });\n        });\n    }\n\n    private getFileOverrides(relativeFilename: string) {\n        let thresholds = {};\n        let overrides = this.config.coverageOptions.threshold.file.overrides;\n        Object.keys(overrides).forEach((pattern) => {\n            if (minimatch(relativeFilename, pattern, { dot: true })) {\n                thresholds = overrides[pattern];\n            }\n        });\n        return thresholds;\n    }\n}\n"]}