{"version":3,"sources":["../src/karma/framework.ts"],"names":[],"mappings":";;AAOA;IAMI,mBAAY,OAAgB,EAAE,MAAqB,EAAE,QAAkB;QAAvE,iBAyBC;QA3BO,cAAS,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAI/C,IAAI,CAAC,MAAM,GAAG,UAAC,WAA0B,EAAE,MAAW;YAClD,KAAI,CAAC,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;YAEvD,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAC/B,QAAQ,CAAC,UAAU,EAAE,CAAC;YAEtB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnC,OAAO,CAAC,MAAM,CAAQ,WAAW,CAAC,KAAM,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,CAAC;gBACvC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACf,CAAC,CAAC,UAAU,CAAC;wBACT,SAAS,EAAE,WAAW,CAAC,OAAO;wBAC9B,KAAK,EAAE,WAAW,CAAC,QAAQ;qBAC9B,CAAC,CAAC;gBACP,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,KAAI,CAAC,GAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAI,CAAC,SAAS,CAAC,MAAM,EAAE,KAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;QACjF,CAAC,CAAC;QAEK,IAAI,CAAC,MAAO,CAAC,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAEO,4BAAQ,GAAhB,UAAiB,GAAW,EAAE,KAAa;QACvC,EAAE,CAAC,CAAC,GAAG,IAAI,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;QAC/C,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,gBAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,8BAAS","file":"../../../../../../../../dist/karma/framework.js","sourcesContent":["import { ConfigOptions } from \"karma\";\nimport { Logger } from \"log4js\";\n\nimport { Bundler } from \"../bundler/bundler\";\nimport { Resolver } from \"../bundler/resolve/resolver\";\nimport { Configuration } from \"../shared/configuration\";\n\nexport class Framework {\n\n    public create: { (karmaConfig: ConfigOptions, helper: any, logger: any): void };\n    private log: Logger;\n    private stringify = require(\"json-stringify-safe\");\n\n    constructor(bundler: Bundler, config: Configuration, resolver: Resolver) {\n\n        this.create = (karmaConfig: ConfigOptions, logger: any) => {\n            this.log = logger.create(\"framework.karma-typescript\");\n\n            config.initialize(karmaConfig);\n            resolver.initialize();\n\n            if (!config.hasFramework(\"commonjs\")) {\n                bundler.attach((<any> karmaConfig.files));\n            }\n\n            config.bundlerOptions.transforms.forEach((t) => {\n                if (t.initialize) {\n                    t.initialize({\n                        appenders: karmaConfig.loggers,\n                        level: karmaConfig.logLevel\n                    });\n                }\n            });\n\n            this.log.debug(\"Configuration:\\n\", this.stringify(config, this.replacer, 3));\n        };\n\n        (<any> this.create).$inject = [\"config\", \"logger\"];\n    }\n\n    private replacer(key: string, value: string) {\n        if (key && typeof value === \"function\") {\n            return (value + \"\").substr(0, 100) + \"...\";\n        }\n        return value;\n    }\n}\n"]}