{"version":3,"sources":["../src/shared/project.ts"],"names":[],"mappings":"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","file":"../../../../../../../../dist/shared/project.js","sourcesContent":["import * as glob from \"glob\";\nimport * as lodash from \"lodash\";\nimport * as path from \"path\";\nimport * as ts from \"typescript\";\n\nimport { FilePattern } from \"karma\";\nimport { Logger } from \"log4js\";\n\nimport PathTool = require(\"./path-tool\");\n\nimport { CompilerOptions } from \"../api\";\nimport { Configuration } from \"./configuration\";\nimport { Extender } from \"./extender\";\n\ntype ConfigFileJson = {\n    config?: any;\n    error?: ts.Diagnostic;\n};\n\nexport enum EventType {\n    FileSystemChanged,\n    FileContentChanged\n}\n\nexport class Project {\n\n    private karmaFiles: string[] = [];\n    private tsconfig: ts.ParsedCommandLine;\n\n    constructor(private config: Configuration, private log: Logger) {}\n\n    public getKarmaFiles(): string[] {\n        return this.karmaFiles;\n    }\n\n    public getTsconfig(): ts.ParsedCommandLine {\n        return this.tsconfig;\n    }\n\n    public hasCompatibleModuleKind(): boolean {\n        return this.tsconfig.options.module === ts.ModuleKind.CommonJS;\n    }\n\n    public getModuleKind(): string {\n        return ts.ModuleKind[this.tsconfig.options.module];\n    }\n\n    public handleFileEvent(): EventType {\n\n        let oldKarmaFiles = lodash.cloneDeep(this.karmaFiles || []);\n        this.expandKarmaFilePatterns();\n\n        if (!lodash.isEqual(oldKarmaFiles, this.karmaFiles)) {\n\n            this.log.debug(\"File system changed, resolving tsconfig\");\n            this.resolveTsConfig();\n            return EventType.FileSystemChanged;\n        }\n\n        return EventType.FileContentChanged;\n    }\n\n    private expandKarmaFilePatterns() {\n\n        let files = (<FilePattern[]> this.config.karma.files);\n        this.karmaFiles.length = 0;\n\n        files.forEach((file) => {\n\n            let g = new glob.Glob(path.normalize(file.pattern), {\n                cwd: \"/\",\n                follow: true,\n                nodir: true,\n                sync: true\n            });\n\n            Array.prototype.push.apply(this.karmaFiles, g.found);\n        });\n    }\n\n    private resolveTsConfig() {\n        let configFileName = this.getTsconfigFilename();\n        let configFileJson = this.getConfigFileJson(configFileName);\n        let existingOptions = this.getExistingOptions();\n        this.tsconfig = this.parseConfigFileJson(configFileName, configFileJson, existingOptions);\n    }\n\n    private getTsconfigFilename(): string {\n\n        let configFileName = \"\";\n\n        if (this.config.tsconfig) {\n\n            configFileName = path.join(this.config.karma.basePath, this.config.tsconfig);\n\n            if (!ts.sys.fileExists(configFileName)) {\n                this.log.warn(\"Tsconfig '%s' configured in karmaTypescriptConfig.tsconfig does not exist\",\n                    configFileName);\n                configFileName = \"\";\n            }\n        }\n\n        return PathTool.fixWindowsPath(configFileName);\n    }\n\n    private getExistingOptions(): CompilerOptions {\n        let compilerOptions = lodash.cloneDeep(this.config.compilerOptions);\n        this.convertOptions(compilerOptions);\n        return compilerOptions;\n    }\n\n    private getConfigFileJson(configFileName: string): ConfigFileJson {\n\n        let configFileJson: ConfigFileJson;\n\n        if (ts.sys.fileExists(configFileName)) {\n\n            this.log.debug(\"Using %s\", configFileName);\n\n            if ((<any> ts).parseConfigFile) { // v1.6\n                configFileJson = (<any> ts).readConfigFile(configFileName);\n            }\n            else if (ts.parseConfigFileTextToJson) { // v1.7+\n                let configFileText = ts.sys.readFile(configFileName);\n                configFileJson = ts.parseConfigFileTextToJson(configFileName, configFileText);\n            }\n            else {\n                this.log.error(\"karma-typescript doesn't know how to use Typescript %s :(\", ts.version);\n                process.exit(1);\n            }\n        }\n        else {\n            configFileJson = {\n                config: lodash.cloneDeep(this.config.defaultTsconfig)\n            };\n            this.log.debug(\"Fallback to default compiler options\");\n        }\n\n        this.log.debug(\"Resolved configFileJson:\\n\", JSON.stringify(configFileJson, null, 3));\n        return configFileJson;\n    }\n\n    private parseConfigFileJson(configFileName: string,\n                                configFileJson: ConfigFileJson,\n                                existingOptions: CompilerOptions): ts.ParsedCommandLine {\n\n        let tsconfig: ts.ParsedCommandLine;\n        let basePath = this.resolveBasepath(configFileName);\n\n        if (existingOptions && existingOptions.baseUrl === \".\") {\n            existingOptions.baseUrl = basePath;\n        }\n\n        Extender.extend(\"include\", configFileJson.config, this.config);\n        Extender.extend(\"exclude\", configFileJson.config, this.config);\n\n        if ((<any> ts).parseConfigFile) {\n            tsconfig = (<any> ts).parseConfigFile(configFileJson.config, ts.sys, basePath);\n            tsconfig.options = (<any> ts).extend(existingOptions, tsconfig.options);\n        }\n        else if (ts.parseJsonConfigFileContent) {\n            tsconfig = ts.parseJsonConfigFileContent(configFileJson.config, ts.sys,\n                basePath, (<any> existingOptions), configFileName);\n        }\n\n        if (!tsconfig) {\n            this.log.error(\"karma-typescript doesn't know how to use Typescript %s :(\", ts.version);\n            process.exit(1);\n        }\n\n        delete tsconfig.options.outDir;\n        delete tsconfig.options.outFile;\n        (<any> tsconfig.options).suppressOutputPathCheck = true;\n\n        this.assertModuleKind(tsconfig);\n\n        this.log.debug(\"Resolved tsconfig:\\n\", JSON.stringify(tsconfig, null, 3));\n\n        return tsconfig;\n    }\n\n    private assertModuleKind(tsconfig: ts.ParsedCommandLine): void {\n\n        if (typeof tsconfig.options.module !== \"number\" &&\n            tsconfig.options.target === ts.ScriptTarget.ES5) {\n            tsconfig.options.module = ts.ModuleKind.CommonJS;\n        }\n    }\n\n    private resolveBasepath(configFileName: string): string {\n\n        if (!configFileName) {\n            return this.config.karma.basePath;\n        }\n\n        let relativePath = path.relative(this.config.karma.basePath, configFileName);\n        let absolutePath = path.join(this.config.karma.basePath, relativePath);\n        return path.dirname(absolutePath);\n    }\n\n    private convertOptions(options: any): void {\n\n        const names = [\"jsx\", \"lib\", \"module\", \"moduleResolution\", \"target\"];\n\n        if (options) {\n            (<any> ts).optionDeclarations.forEach((declaration: any) => {\n                if (names.indexOf(declaration.name) !== -1) {\n                    this.setOptions(options, declaration);\n                }\n            });\n        }\n    }\n\n    private setOptions(options: any, declaration: any) {\n        let name = declaration.name;\n        if (options[name]) {\n            if (Array.isArray(options[name])) {\n                options[name].forEach((option: string, index: number) => {\n                    let key = option.toLowerCase();\n                    options[name][index] = lodash.isMap(declaration.element.type) ?\n                        declaration.element.type.get(key) : declaration.type[key];\n                });\n            }\n            else {\n                let key = options[name].toLowerCase();\n                options[name] = lodash.isMap(declaration.type) ?\n                    declaration.type.get(key) : declaration.type[key];\n            }\n        }\n    }\n}\n"]}