{"version":3,"sources":["../src/bundler/transformer.ts"],"names":[],"mappings":"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","file":"../../../../../../../../dist/bundler/transformer.js","sourcesContent":["import * as async from \"async\";\nimport { ErrorCallback } from \"async\";\nimport * as os from \"os\";\nimport * as ts from \"typescript\";\n\nimport { Transform, TransformContext } from \"../api\";\nimport { Configuration } from \"../shared/configuration\";\nimport { Project } from \"../shared/project\";\nimport { BundleItem } from \"./bundle-item\";\nimport { Queued } from \"./queued\";\n\nexport class Transformer {\n\n    constructor(private config: Configuration, private project: Project) { }\n\n    public applyTsTransforms(bundleQueue: Queued[], onTransformsApplied: { (): void }): void {\n\n        let transforms = this.config.bundlerOptions.transforms;\n\n        if (!transforms.length) {\n            process.nextTick(() => {\n                onTransformsApplied();\n            });\n            return;\n        }\n\n        async.eachSeries(bundleQueue, (queued: Queued, onQueueProcessed: ErrorCallback<Error>) => {\n\n            let context: TransformContext = {\n                config: this.config,\n                filename: queued.file.originalPath,\n                module: queued.file.originalPath,\n                source: queued.emitOutput.sourceFile.getFullText(),\n                ts: {\n                    ast: queued.emitOutput.sourceFile,\n                    transpiled: queued.emitOutput.outputText,\n                    version: ts.version\n                }\n            };\n            async.eachSeries(transforms, (transform: Transform, onTransformApplied: ErrorCallback<Error>) => {\n                process.nextTick(() => {\n                    transform(context, (error: Error, dirty: boolean, transpile: boolean = true) => {\n                        this.handleError(error, transform, context);\n                        if (dirty) {\n                            if (transpile) {\n                                let transpiled = ts.transpileModule(context.source, {\n                                    compilerOptions: this.project.getTsconfig().options,\n                                    fileName: context.filename\n                                });\n                                queued.emitOutput.outputText = transpiled.outputText;\n                                queued.emitOutput.sourceMapText = transpiled.sourceMapText;\n                            }\n                            else {\n                                queued.emitOutput.outputText = context.ts.transpiled;\n                            }\n                        }\n                        onTransformApplied();\n                    });\n                });\n            }, onQueueProcessed);\n        }, onTransformsApplied);\n    }\n\n    public applyTransforms(bundleItem: BundleItem, onTransformsApplied: { (): void }): void {\n\n        let transforms = this.config.bundlerOptions.transforms;\n\n        if (!transforms.length) {\n            process.nextTick(() => {\n                onTransformsApplied();\n            });\n            return;\n        }\n\n        let context: TransformContext = {\n            config: this.config,\n            filename: bundleItem.filename,\n            js: {\n                ast: bundleItem.ast\n            },\n            module: bundleItem.moduleName,\n            source: bundleItem.source\n        };\n        async.eachSeries(transforms, (transform: Transform, onTransformApplied: ErrorCallback<Error>) => {\n            process.nextTick(() => {\n                transform(context, (error: Error, dirty: boolean) => {\n                    this.handleError(error, transform, context);\n                    if (dirty) {\n                        bundleItem.ast = context.js.ast;\n                        bundleItem.source = context.source;\n                    }\n                    onTransformApplied();\n                });\n            });\n        }, onTransformsApplied);\n    }\n\n    private handleError(error: Error, transform: Transform, context: TransformContext): void {\n        if (error) {\n            let errorMessage = context.filename + \": \" + error.message + os.EOL +\n                \"Transform function: \" + os.EOL + os.EOL +\n                transform + os.EOL;\n            throw new Error(errorMessage);\n        }\n    }\n}\n"]}